import React from "react";
import { graphql } from "gatsby";
import BannerLayout, { Title } from "@/layouts/BannerLayout";
import styled from "styled-components";
import LocalizedString from "@/i18n/LocalizedString";
import lang from "@/i18n/lang";
import Page from "@/layouts/components/Page";
import Helmet from "react-helmet";
import { useStore } from "simstate";
import { I18nStore } from "@/stores/I18nStore";
import { FaGithub } from "react-icons/fa";
import { Presentation } from "@/models/Presentation";
import { colors } from "@/styles/variables";

interface Props {
  data: {
    allSlides: {
      nodes: { name: string; html_url: string; }[];
    },
  };
}

const root = lang.slides;

export default function Slides(props: Props) {
  const { data: { allSlides: { nodes }}} = props;

  const i18nStore = useStore(I18nStore);

  const title = i18nStore.translate(root.title) as string;
  const description = i18nStore.translate(root.description) as string;
  const documentTitle = i18nStore.translate(root.documentTitle) as string;

  // normalize
  const map = new Map<string, Presentation[]>();
  nodes.forEach(({ name, html_url }) => {

    const year = name.substr(0, 4);

    // create presentation object
    const pre = {
      year,
      date: `${year}/${name.substr(4, 2)}/${name.substr(6, 2)}`,
      name: name.substring(9),
      githubUrl: html_url,
    } as Presentation;

    if (map.has(year)) {
      map.get(year)!!.push(pre);
    } else {
      map.set(year, [pre]);
    }
  });

  // to sorted array
  const sortedData = Array.from(map.entries()).sort((a, b) => b[0].localeCompare(a[0]));

  return (

    <BannerLayout transparentHeader={false} banner={
      <div>
        <Title>{title}</Title>
        <p>{description}</p>
      </div>
    }>
      <Helmet
        title={`${documentTitle} - VicBlog`}
        meta={[
          {name: "og:title", content: title},
          {name: "og:description", content: description},
          {name: "og:locale", content: i18nStore.language.detailedId},
          {name: "og:site_name", content: "VicBlog"},
        ]}
      />
      <Container>
        <p>{i18nStore.translate(root.autoGenerated, [
          <a key={"link"} href={"https://github.com/viccrubs/Presentations"}>
            <FaGithub/>viccrubs/Presentations
          </a>,
        ])}</p>
        {
          sortedData.map(([year, pres]) => {
            return (
              <Year key={year}>
                <YearNode>{year}</YearNode>
                {pres.sort((a, b) => b.date.localeCompare(a.date)).map((pre) => (
                  <PreNode  key={pre.date}>
                    <PreNodeName href={pre.githubUrl} target={"__blank"}>{pre.name}</PreNodeName>
                    <PreNodeDate>{pre.date}</PreNodeDate>
                  </PreNode>
                ))}
              </Year>
            );
          })
        }
      </Container>
    </BannerLayout>
  );
}

const Container = styled(Page)`
  max-width: 680px;
  margin: 0 auto;
`;

const Year = styled.div`
  border-left: 1px lightgray solid;
  padding: 8px 0;
`;

const YearNode = styled.h2`
  font-size: 28px;
  font-weight: bold;
  margin-left: 0px;
  
  padding: 0 8px;
  
  border-left: 4px ${colors.tocLinkActiveColor} solid;
  
`;

const PreNode = styled.div`
  margin-bottom: 8px;
    padding: 0 8px;

`;

const PreNodeDate = styled.span`
  color: gray;
  font-size: small;
`;

const PreNodeName = styled.a`
  display: block;
`;

export const query = graphql`
  query Slides {
    allSlides(filter: {type: { eq: "dir" }}) {
      nodes {
        name
        html_url
        type
      }
    }
  }
`;
